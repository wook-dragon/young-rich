				2장


const와 let은 블록 스코프를 가지므로 블록 밖에서는 변수에 접근 할 수 없습니다.
const는 한번 대입하면 다른값을 대입 할 수 없습니다.

객체 리터럴 : new 와 object 생성자를 이용해 객체를 생성하고 필요한 구조를 만들어 코드가 간결해지고 가독성이 높아진다.

비구조화 할당 : 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 자바스크립트 표현식

Promise : 내용이 실행되었지만 결과를 반환하지 않은 객체 + 비동기 처리를 순차적으로 처리 할 수 있는 함수
※ Promise가 여러개 있을때 Promise.all에 넣으면 모두 Resolve 될때까지 기다렸다가 then으로 넘어간다.
Promise.all
1. 모든 Promise들의 fulfill 되기
2. 첫번째 Rejection(거부) 나오면 다음 블락 try - catch로 넘어간다.
Resolve : Promise가 성공적으로 종료 될때 Promise 뒤에 따라오는 then 콜백에 arg로 사용 될때 value 넘겨 받음
Reject : Promise가 에러를 발견하거나 조건이 맞지않으면 에러가 발생하는데 그 경우에 호출

비동기 콜백 : JAVA나 C에서 스레드를 생성하여 메인 함수와 별도 프로세스로 작업하는것과 같다
콜백지옥 : 비동기 처리 로직을 위해 콜백함수를 여러개 사용 할 때 발생하는 문제이다.

Async : 콜백함수의 중첩을 해결 하는 모듈
※ 모듈 : 특정한 기능을 하는 함수나 변수들의 집합 
Await : 함수의 결과값을 변수의 저장

encodeURIComponent : encodeURI() 처럼 주소표시 인코딩 하지만 특수문자도 추가로 인코딩
encodeURI() : 인터넷 주소표시에 있는 특수문자들은 인코딩 하지 않는다.
escape() : 1바이트 문자 : %XX ... | 2바이트 : %UXX 식으로 변환 
decldeURIComponent : 인코딩 풀 때 사용

dataSet : 스크립트 코드로 동적인 움직임을 줄 때 추가적인 정보가 필요하다 , 클래스 소것ㅇ에 특별 식별자를 추가하지만 
	혹은 복잡한 상황이 될때 비표준 속성을 사용
					

				3장



REPL : 입력한 코드 읽고 (Read) , 해석하고 (Eval) , 결과물 반환 (Print) , 종료 할 때 까지 반복 (Loop) 

global (객체) : 브라우저의 window와 같은 전역 변수 , 모든 파일에 접근이 가능하다.
※ 노드는 DOM 이나 BOM이 없어 window 와 document 객체 사용이 불가능하다.

console.trace(레이블) : 에러가 어디서 발생했는지 추적할 수 있게 해준다.
setTimeout(콜백함수 , 밀리초) : 주어진 밀리초 1000 = 1초 이후에 콜백함수 실행 
setInterval (콜백함수 , 밀리초) : 주어진 밀리초마다 콜백함수 반복 실행
setImmediate(콜백함수) : 콜백함수를 즉시 실행

exports 객체 : module.exports와의 참조 관계가 깨지지 않도록 주의 
※ exports에는 반드시 객체처럼 속성명과 속성값을 대입해야한다.

process : 객체는 현재 실행되고 있는 노드 프로세스에 대한 정보를 담고 있다.
process.env : 서비스의 중요한 키를 저장하는 공간

path : 폴더와 파일의 경로를 쉽게 조작하도록 도와주는 모듈
path.parse(경로) : 파일 경로를 root , dir , base , ext , name 으로 구분
path.normalize(경로) : / 나 \ 를 실수로 여러번 사용하거나 혼용 했을 때 정상적인 경로를 반환
path.join(경로 , ... ) : 여러인자를 넣으면 하나으 경로로 합쳐준다 , 상대 경로인 ... (부모디렉터리) 과 (현위치)도 알아서 처리

getAll(키) : 키에 해당하는 모든 값들을 가져온다.
get(키) : 키에 해당하는 첫 번째 값만 가져옵니다.
keys() : searchParams의 모든 키를 반복기 (iterator , ES2015 문법) 객체로 가져온다
set(키,값) : append와 비슷하지만 같은 키의 값들을 모두 지우고 새로 추가

queryString.parse(쿼리) : url의 query 부븐을 자바스크립트 객체로 분해
queryString.Stringfy(객체) : 분해된 query 객체를 문자열로 다시 재조립

crypto : 다양한 방식의 암호화를 도와주는 모듈
createHash(알고리즘) : 사용할 해시 알고리즘을 넣어줍니다.
update(문자열) : 변환할 문자열을 넣어줍니다.
digest(인코딩) : 인코딩할 알고리즘을 넣어줍니다.
crypto.createCipher(알고리즘 , 키 ) : 암호화 알고리즘과 키를 넣어줍니다.
cipher.update(문자열 , 인코딩 , 출력 인코딩) : 암호화 할 대상과 대상의 인코딩 , 출력 결과물의 인코딩을 넣어줍닏.
cipher.final(출력 인코딩 ) : 출력 결과물의 인코딩을 넣어주면 암호화가 완료됩니다.
crypto.createDecipher(알고리즘 , 키) : 복호화 할때 사용합니다.
decipher.update(문자열 , 인코딩 , 출력 인코딩) : 암호화된 문장 , 그 문장의 인코딩 , 복호화할 인코딩을 넣어줍니다.
decipher.final(출력 인코딩) : 복호화 결과물의 인코딩을 넣어줍니다.

deprecated : 프로그래밍 용어로 "중요도가 떨어져 더 이상 사용되지 않고 앞으로는 사라지게" 될 것이라는 뜻
util.deprecate : 함수가 deprecated 처리 되었음을 알려준다.
util.promisify : 콜백 패턴을 프로미스 패턴으로 바꿔줍니다.

fs모듈 : 파일시스템에 접근 하는 모듈입니다. 즉 , 파일을 생성 , 삭제 , 읽고 쓸 수 있습니다. 폴더도 만들었다 지웠다도 가능합니다.
Buffer
from(문자열) : 문자열을 버퍼로 바꿀 수 있다.
toString(버퍼) : 버퍼를 다시 문자열로 바꿀 수 있다.
concat(배열) : 배열안에 든 버퍼들을 하나로 합친다.
alloc(바이트) : 빈 버퍼를 생성한다.
fs.access(경로 , 옵션 , 콜백) : 폴더나 파일을 접근 할 수 있는지 체크
fs.open(경로 , 옵션 , 콜백) : 파일의 아이디 (fd 변수) 를 가져오는 메소드 , 아이디를 사용해 fs.read() , fs.write()를 이용해 읽거나 작성가능
fs.rmdir(경로 , 콜백) : 폴더를 지울 수 있습니다. 폴더 안에 파일이 있따면 에러가 발생하므로 먼저 내부 파일을 모두 지우고 호출해야한다.

이벤트
on(이벤트명 , 콜백) : 이벤트 이름과 이벤트 발생시의 콜백을 연결
addListener(이벤트명 , 콜백) : on과 기능이 같다
emit(이벤트명) : 이벤트를 호출하는 메소드
once(이벤트명 , 콜백) : 한번만 실행되는 이벤트
removeAllListeners(이벤트명) : 이벤트에 연결된 모든 이벤트 리스너를 제거합니다.
removeListener(이벤트명 , 리스너) : 이벤트에 연결된 리스너를 하나씩 제거합니다.
off(이벤트명 , 콜백) : 노드 10버전에서 추가된 메소드로 removeListener와 기능이 같다
lostenerCount(이벤트명) : 현재 리스너가 몇개 연결되어 있는지 확인 


url : 인터넷 주소를 쉽게 조작하도록 도와주는 모듈 

